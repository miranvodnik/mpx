<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="dd/de9/classmpx_1_1_mpx_runnable">
<title>mpx::MpxRunnable class Reference</title>
<para>
    <programlisting>#include <link linkend="dc/dd0/_mpx_runnable_8h">&lt;MpxRunnable.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for mpx::MpxRunnable</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../da/d22/classmpx_1_1_mpx_runnable__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for mpx::MpxRunnable</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../d7/de9/classmpx_1_1_mpx_runnable__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>pid_t m_threadId<para><emphasis>thread id</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>pthread_t m_handle</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>pthread_mutex_t m_mutex<para><emphasis>semaphore provided to enable synchronous access to an instance</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int m_exitCode<para><emphasis>associated thread exit code returned by Run()</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a65224aa79ffe2de53cb79601c09c7218">MpxRunnable</link> (
void )<para><emphasis>instance initialization</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a21858f2315236ee4e36b9351193216a9">~MpxRunnable</link> (
void )<para><emphasis>delete an instance of this object</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1aec4ef81d71e46d49fccadfdbdda81b02">Start</link> (
int flags)<para><emphasis>start associated thread</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a91cd5b243678a503370ae1bc8a53110d">WaitForCompletion</link> (
int timeOut)<para><emphasis>wait associated thread to terminate</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a38f6105a901e108f2f8154e41f83dbf0">Suspend</link> (
void )<para><emphasis>suspend associated thread</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a176e06efb88df110648fa863c17ef3fc">Resume</link> (
void )<para><emphasis>resume suspended thread</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ac07c39a57a031b01f1adad23eb1622d8">Terminate</link> (
int timeOut)<para><emphasis>cancel execution of thread</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1aa5f39d4696417987765207395623d1fc">Abort</link> (
int code)<para><emphasis>abort thread execution</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run</link> (
void )<para><emphasis>thread running loop
this function is the only function of this interface which must
be implemented by derived class. This function implements the
running logic of associated program thread although this is not
the base function of associated thread. The actual base function
of associated thread is _Run(). But nevertheless, function Run()
must be implemented as if it is the base function of associated
thread. Normally it executes an infinite loop, executing some job,
but always prepared to terminate immediately after any iteration
or even in the middle of the job, especially when executing lengthy
jobs</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a2c1ba8644c69e282fb85da094bbcc39b">InitInstance</link> (
void )<para><emphasis>initialize subclass prior to running thread</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a7dae07c4b3dceebf212ce016060ef171">ExitInstance</link> (
void )<para><emphasis>function called when associated thread terminates</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>pid_t <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1adef22c79449c497c6fc5c559e697378a">getTid</link> (
void )<para><emphasis>get task ID</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>pthread_t <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a2147938e192c817e54f4d5424a8a080e">getHandle</link> (
void )<para><emphasis>get thread handle</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a3da7028f6f8f498e0b9a98bd4a028495">getExitCode</link> (
void )<para><emphasis>get exit code of associated thread</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ac3ce861a9a64eab89bb219ed03480522">Lock</link> (
)<para><emphasis>lock mutex</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a6d1b71bd11cba008343904bbe1ecbc5b">Unlock</link> (
)<para><emphasis>unlock mutex</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static void * <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a0a52d2b12c17c5fbff20ffba265fa96c">_Run</link> (
void * data)<para><emphasis>running function of associated thread</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static void <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad1c84b432022c813c8f3dd6ed4a24ba7">_Cleanup</link> (
void * data)<para><emphasis>cancellation trigger</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void * <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a801abcf245832490186ef92699b144e8">_Run</link> (
)<para><emphasis>non-static version of _Run()</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1afc7c3e8f5198d60cd6724a675da61269">Cleanup</link> (
void )<para><emphasis>non-static version of cancellation trigger</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>class representing single thread of execution </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>Interface <link linkend="dd/de9/classmpx_1_1_mpx_runnable">MpxRunnable</link> defines and partially implements class, which is capable to run and control its own program thread. Every derived class must implement at least function <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link> of this interface. This function must implement the running logic of program thread. Other virtual functions should not be implemented by derived class, thus doing nothing </para>
                <para>Definition at line 45 of file MpxRunnable.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>MpxRunnable.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
            <simplesect>
                <title>pthread_t mpx::MpxRunnable::m_handle</title>                
<para>handle of program thread associated with an instance of this class. This handle is returned by pthread_create() and should be used in any function dealing with thread handles. This variable is private. Its value can be accessed with function getHabdle() and cannot be changed </para>

                <para>Definition at line 491 of file MpxRunnable.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>MpxRunnable.h</para></listitem></itemizedlist></para>
            </simplesect>
        </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a65224aa79ffe2de53cb79601c09c7218">
                <title>mpx::MpxRunnable::MpxRunnable (void)</title> <emphasis>instance initialization</emphasis>
                
<para>initialize (clear) members. mutex p_mutex is set to be recursive, recursive locking from same thread will not block </para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a21858f2315236ee4e36b9351193216a9">
                <title>virtual mpx::MpxRunnable::~MpxRunnable (void)</title> <emphasis>delete an instance of this object</emphasis>
                
<para>deleting this object when associated thread is still running is not recommended. Thread should be stopped, awaited and only after then deleted </para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1aec4ef81d71e46d49fccadfdbdda81b02">
                <title>int mpx::MpxRunnable::Start (int flags=0)</title> <emphasis>start associated thread</emphasis>
                
<para>function tries to create and start program thread associated with this instance. Before creating new thread it calls <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a2c1ba8644c69e282fb85da094bbcc39b">InitInstance()</link> giving to this object instance a chance to do an initialization step just prior to thread start. If <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a2c1ba8644c69e282fb85da094bbcc39b">InitInstance()</link> returns error code (everything but S_OK) program thread is not created. Object instance should be deleted immediately in this case. It should be noted that InitInstance is executed in the context of calling thread and not in the context of the newly created thread. If there are any entities concerning new thread which are &apos;context sensitive&apos; it may be better to perform initialization step in the context of newly created thread from the function <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link></para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>flags</entry>
                                <entry>
<para>flags which are used (as is) in pthread_create(). Default value of this parameter is 0</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>0 program thread has been created </para>
<simplesect/>
<para>other thread creation error, or error returned by InitInstance () </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a91cd5b243678a503370ae1bc8a53110d">
                <title>int mpx::MpxRunnable::WaitForCompletion (int timeOut=-1)</title> <emphasis>wait associated thread to terminate</emphasis>
                
<para>function waits until associated program thread terminates or until timeout expires, whichever comes first</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timeOut</entry>
                                <entry>
<para>time to wait the associated thread to terminate. Default value is infinite, thus until program thread terminates</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>0 program thread has not terminated </para>
<simplesect/>
<para>other exit code of associated thread </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a38f6105a901e108f2f8154e41f83dbf0">
                <title>int mpx::MpxRunnable::Suspend (void)</title> <emphasis>suspend associated thread</emphasis>
                
<para>function tries to suspend program thread associated with this object</para>

<para><formalpara><title>Returns: </title>

<para>0 thread is suspended </para>
<simplesect/>
<para>other thread cannot be suspended </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a176e06efb88df110648fa863c17ef3fc">
                <title>int mpx::MpxRunnable::Resume (void)</title> <emphasis>resume suspended thread</emphasis>
                
<para>function tries to resume execution of program thread associated with this object</para>

<para><formalpara><title>Returns: </title>

<para>0 thread execution is resumed </para>
<simplesect/>
<para>other thread cannot be resumed </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1ac07c39a57a031b01f1adad23eb1622d8">
                <title>int mpx::MpxRunnable::Terminate (int timeOut=-1)</title> <emphasis>cancel execution of thread</emphasis>
                
<para>function cancels thread execution and wait it to terminate</para>

<para><formalpara><title>Returns: </title>

<para>code exit code of terminated thread </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1aa5f39d4696417987765207395623d1fc">
                <title>int mpx::MpxRunnable::Abort (int code)</title> <emphasis>abort thread execution</emphasis>
                
<para>function terminates execution of program thread associated with this object instance immediately. If it is terminated normally it returns forced code, otherwise it returns error code returned by thread</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>code</entry>
                                <entry>
<para>thread exit code forced by the calling thread</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>code forced exit code </para>
<simplesect/>
<para>other unsuccessful termination of associated thread </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">
                <title>virtual int mpx::MpxRunnable::Run (void)=0</title> <emphasis>thread running loop
this function is the only function of this interface which must
be implemented by derived class. This function implements the
running logic of associated program thread although this is not
the base function of associated thread. The actual base function
of associated thread is _Run(). But nevertheless, function Run()
must be implemented as if it is the base function of associated
thread. Normally it executes an infinite loop, executing some job,
but always prepared to terminate immediately after any iteration
or even in the middle of the job, especially when executing lengthy
jobs</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>code return code of function <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link> implemented by derived class </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a2c1ba8644c69e282fb85da094bbcc39b">
                <title>virtual int mpx::MpxRunnable::InitInstance (void)</title> <emphasis>initialize subclass prior to running thread</emphasis>
                
<para>Default implementation of this function does nothing and returns 0, thus telling to the calling environment that associated thread can be created and executed. If it is implemented by derived class we must obey these facts:<itemizedlist>
<listitem>
<para>this function is supposed to initialize some resources used by associated thread</para>
</listitem><listitem>
<para>return code of this function is used to determine if associated thread will be created at all. Returning 0 signals the calling environment to proceed with thread creation and execution. Other return values signal to the calling environment that the normal thread creation sequence must be terminated with error code returned by this function</para>
</listitem><listitem>
<para>function is not running in the context of associated thread since it has not been created yet. Initialization which depends on the context of the associated thread should be performed from <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link> or some function called within it.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>Returns: </title>

<para>0 successful initialization. Associated program thread will be created and executed </para>
<simplesect/>
<para>other initialization fault. Associated thread will not be created and thus not executed </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a7dae07c4b3dceebf212ce016060ef171">
                <title>virtual int mpx::MpxRunnable::ExitInstance (void)</title> <emphasis>function called when associated thread terminates</emphasis>
                
<para>This function is provided to finish the execution of associated thread. It is called immediately after <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link> terminates in the context of associated thread. Default implementation does nothing. This function gives to program the last chance to perform some actions which should be done when associated thread terminates</para>

<para><formalpara><title>Returns: </title>

<para>code Default implementation of this function returns return code of <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link>. If it is implemented by derived class it can return any integer value </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1adef22c79449c497c6fc5c559e697378a">
                <title>pid_t mpx::MpxRunnable::getTid (void)</title> <emphasis>get task ID</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>id task ID of associated thread </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a2147938e192c817e54f4d5424a8a080e">
                <title>pthread_t mpx::MpxRunnable::getHandle (void)</title> <emphasis>get thread handle</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>NULL associated thread does not exist </para>
<simplesect/>
<para>handle thread handle as returned from pthread_create() </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a3da7028f6f8f498e0b9a98bd4a028495">
                <title>int mpx::MpxRunnable::getExitCode (void)</title> <emphasis>get exit code of associated thread</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>-1 associated thread is still running </para>
<simplesect/>
<para>other return code of associated thread </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1ac3ce861a9a64eab89bb219ed03480522">
                <title>int mpx::MpxRunnable::Lock ()</title> <emphasis>lock mutex</emphasis>
                
<para>function locks mutex m_mutex. If it is already locked by another thread, this function will block until it will be unlocked by owning thread. Function should be used to synchronize access to resources common to many threads</para>

<para><formalpara><title>Returns: </title>

<para>0 associated thread is locked </para>
<simplesect/>
<para>other error code returned by pthread_mutex_lock() </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a6d1b71bd11cba008343904bbe1ecbc5b">
                <title>int mpx::MpxRunnable::Unlock ()</title> <emphasis>unlock mutex</emphasis>
                
<para>function unlocks mutex m_mutex.</para>

<para><formalpara><title>Returns: </title>

<para>0 associated thread is unlocked </para>
<simplesect/>
<para>other error code returned by pthread_mutex_unlock() </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a0a52d2b12c17c5fbff20ffba265fa96c">
                <title>static void* mpx::MpxRunnable::_Run (void *data)</title> <emphasis>running function of associated thread</emphasis>
                
<para>Function is global because it is 3rd parameter of pthread_create() and private so that it can be executed only by member functions of this class (<link linkend="dd/de9/classmpx_1_1_mpx_runnable_1aec4ef81d71e46d49fccadfdbdda81b02">Start()</link> function). This function is actual main function of associated thread. Its only purpose is to start <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link> and <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a7dae07c4b3dceebf212ce016060ef171">ExitInstance()</link> and to finish associated thread with appropriate exit code; the code returned by function <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link></para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>void pointer to self; 4th parameter to pthread_create() is void*</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>code return code of <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1ad1c84b432022c813c8f3dd6ed4a24ba7">
                <title>static void mpx::MpxRunnable::_Cleanup (void *data)</title> <emphasis>cancellation trigger</emphasis>
                
<para>Function is static as requested by pthread_cleanup() and private to disable invocation of this function by external entities. It is executed automatically when associated thread terminates normally or unexpectedly due to cancellation action. Function (in fact it&apos;s non-static version) does nothing. Its only purpose is to enable calling <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a7dae07c4b3dceebf212ce016060ef171">ExitInstance()</link> function no matter how associated thread is terminated: normally or canceled</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>void pointer to self </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1a801abcf245832490186ef92699b144e8">
                <title>void* mpx::MpxRunnable::_Run ()</title> <emphasis>non-static version of _Run()</emphasis>
                
<para>function remembers task ID of associated thread and runs it by calling function <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1ad5feb0b9a72410a55010c50dc9086649">Run()</link>. Thread execution can be canceled in which case cancellation function _Cleanup() will be triggered enabling <link linkend="dd/de9/classmpx_1_1_mpx_runnable_1a7dae07c4b3dceebf212ce016060ef171">ExitInstance()</link> function to be called in any case, no matter how thread terminates, normally or by cancellation</para>

<para><formalpara><title>Returns: </title>

<para>0 normal termination </para>
<simplesect/>
<para>1 abnormal termination </para>
</formalpara>
</para>

            </section>
            <section xml:id="dd/de9/classmpx_1_1_mpx_runnable_1afc7c3e8f5198d60cd6724a675da61269">
                <title>void mpx::MpxRunnable::Cleanup (void)</title> <emphasis>non-static version of cancellation trigger</emphasis>
                
            </section>
</section>
